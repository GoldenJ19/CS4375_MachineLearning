names(CustomerData) <- gsub("\\ ", ".", names(CustomerData))
# Remove na rows
CustomerData <- CustomerData[complete.cases(CustomerData),]
# settings/library imports
set.seed(1234)
library(stringr)
library(e1071)
# Read data set
CustomerData_raw <- read.csv("Invistico_Airline.csv")
# Cut down data set, aiming for equal divide between satisfied/dissatisfied
CustomerData_sat <- CustomerData_raw[CustomerData_raw$satisfaction == "satisfied",]
CustomerData_dis <- CustomerData_raw[CustomerData_raw$satisfaction == "dissatisfied",]
CustomerData <- rbind(CustomerData_sat[1:(nrow(CustomerData_sat)/10),], CustomerData_dis[1:(nrow(CustomerData_dis)/10),])
# Factor columns
CustomerData$satisfaction <- factor(CustomerData$satisfaction) # satisfaction
CustomerData$Gender <- factor(CustomerData$Gender) # gender
CustomerData$Customer.Type <- factor(CustomerData$Customer.Type) # customer type
CustomerData$Type.of.Travel <- factor(CustomerData$Type.of.Travel) # travel type
CustomerData$Class <- factor(CustomerData$Class) # class
# Normalize factor names
levels(CustomerData$satisfaction) <- c("Dissatisfied", "Satisfied")
levels(CustomerData$Customer.Type) <- c("Disloyal", "Loyal")
levels(CustomerData$Type.of.Travel) <- c("Business", "Personal")
# Continue factoring numeric finite columns
for(i in 8:21) {
CustomerData[,i] <-
factor(CustomerData[,i], levels=c(0,1,2,3,4,5)) # out-of-5 ratings
}
# Normalize column names
names(CustomerData) <- gsub("\\.", " ", names(CustomerData))
names(CustomerData) <- str_to_title(names(CustomerData))
names(CustomerData) <- gsub("\\ ", ".", names(CustomerData))
# Remove na rows
CustomerData <- CustomerData[complete.cases(CustomerData),]
# train/test division
i <- sample(1:nrow(CustomerData), nrow(CustomerData)*0.8, replace=FALSE)
train <- CustomerData[i,]
test <- CustomerData[-i,]
# summary
summary(train)
str(train)
# NA count
print(paste('Number of NAs:', sum(is.na(train)))) # Print NA count
# settings/library imports
set.seed(1234)
library(stringr)
library(e1071)
# settings/library imports
set.seed(1234)
library(stringr)
library(e1071)
# Read data set
CustomerData_raw <- read.csv("Invistico_Airline.csv")
# Cut down data set, aiming for equal divide between satisfied/dissatisfied
CustomerData_sat <- CustomerData_raw[CustomerData_raw$satisfaction == "satisfied",]
CustomerData_sat <- CustomerData_sat[sample(1:nrow(CustomerData_sat), nrow(CustomerData_sat)*0.2, replace=FALSE),]
CustomerData_dis <- CustomerData_raw[CustomerData_raw$satisfaction == "dissatisfied",]
CustomerData_dis <- CustomerData_dis[sample(1:nrow(CustomerData_dis), nrow(CustomerData_dis)*0.2, replace=FALSE),]
CustomerData <- rbind(CustomerData_sat[1:(nrow(CustomerData_sat)),], CustomerData_dis[1:(nrow(CustomerData_dis)),])
#reset seed
set.seed(1234)
View(CustomerData)
View(CustomerData)
View(CustomerData)
# settings/library imports
set.seed(1234)
library(stringr)
library(e1071)
# Read data set
CustomerData_raw <- read.csv("Invistico_Airline.csv")
# Cut down data set, aiming for equal divide between satisfied/dissatisfied
CustomerData_sat <- CustomerData_raw[CustomerData_raw$satisfaction == "satisfied",]
CustomerData_sat <- CustomerData_sat[sample(1:nrow(CustomerData_sat), nrow(CustomerData_sat)*0.2, replace=FALSE),]
CustomerData_dis <- CustomerData_raw[CustomerData_raw$satisfaction == "dissatisfied",]
CustomerData_dis <- CustomerData_dis[sample(1:nrow(CustomerData_dis), nrow(CustomerData_dis)*0.2, replace=FALSE),]
CustomerData <- rbind(CustomerData_sat[1:(nrow(CustomerData_sat)),], CustomerData_dis[1:(nrow(CustomerData_dis)),])
#reset seed
set.seed(1234)
# Factor columns
CustomerData$satisfaction <- factor(CustomerData$satisfaction) # satisfaction
CustomerData$Gender <- factor(CustomerData$Gender) # gender
CustomerData$Customer.Type <- factor(CustomerData$Customer.Type) # customer type
CustomerData$Type.of.Travel <- factor(CustomerData$Type.of.Travel) # travel type
CustomerData$Class <- factor(CustomerData$Class) # class
# Normalize factor names
levels(CustomerData$satisfaction) <- c("Dissatisfied", "Satisfied")
levels(CustomerData$Customer.Type) <- c("Disloyal", "Loyal")
levels(CustomerData$Type.of.Travel) <- c("Business", "Personal")
# Continue factoring numeric finite columns
for(i in 8:21) {
CustomerData[,i] <-
factor(CustomerData[,i], levels=c(0,1,2,3,4,5)) # out-of-5 ratings
}
# Normalize column names
names(CustomerData) <- gsub("\\.", " ", names(CustomerData))
names(CustomerData) <- str_to_title(names(CustomerData))
names(CustomerData) <- gsub("\\ ", ".", names(CustomerData))
# Remove na rows
CustomerData <- CustomerData[complete.cases(CustomerData),]
# train/test division
i <- sample(1:nrow(CustomerData), nrow(CustomerData)*0.8, replace=FALSE)
train <- CustomerData[i,]
test <- CustomerData[-i,]
# summary
summary(train)
str(train)
# NA count
print(paste('Number of NAs:', sum(is.na(train)))) # Print NA count
# settings/library imports
set.seed(1234)
library(stringr)
library(e1071)
# Read data set
CustomerData_raw <- read.csv("Invistico_Airline.csv")
# Cut down data set, aiming for equal divide between satisfied/dissatisfied
CustomerData_sat <- CustomerData_raw[CustomerData_raw$satisfaction == "satisfied",]
CustomerData_sat <- CustomerData_sat[sample(1:nrow(CustomerData_sat), nrow(CustomerData_sat)*0.1, replace=FALSE),]
CustomerData_dis <- CustomerData_raw[CustomerData_raw$satisfaction == "dissatisfied",]
CustomerData_dis <- CustomerData_dis[sample(1:nrow(CustomerData_dis), nrow(CustomerData_dis)*0.1, replace=FALSE),]
CustomerData <- rbind(CustomerData_sat[1:(nrow(CustomerData_sat)),], CustomerData_dis[1:(nrow(CustomerData_dis)),])
#reset seed
set.seed(1234)
?svm
# settings/library imports
set.seed(1234)
library(stringr)
library(e1071)
# Read data set
CustomerData_raw <- read.csv("Invistico_Airline.csv")
# Cut down data set, aiming for equal divide between satisfied/dissatisfied
CustomerData_sat <- CustomerData_raw[CustomerData_raw$satisfaction == "satisfied",]
CustomerData_sat <- CustomerData_sat[sample(1:nrow(CustomerData_sat), nrow(CustomerData_sat)*0.1, replace=FALSE),]
CustomerData_dis <- CustomerData_raw[CustomerData_raw$satisfaction == "dissatisfied",]
CustomerData_dis <- CustomerData_dis[sample(1:nrow(CustomerData_dis), nrow(CustomerData_dis)*0.1, replace=FALSE),]
CustomerData <- rbind(CustomerData_sat[1:(nrow(CustomerData_sat)),], CustomerData_dis[1:(nrow(CustomerData_dis)),])
#reset seed
set.seed(1234)
# Factor columns
CustomerData$satisfaction <- factor(CustomerData$satisfaction) # satisfaction
CustomerData$Gender <- factor(CustomerData$Gender) # gender
CustomerData$Customer.Type <- factor(CustomerData$Customer.Type) # customer type
CustomerData$Type.of.Travel <- factor(CustomerData$Type.of.Travel) # travel type
CustomerData$Class <- factor(CustomerData$Class) # class
# Normalize factor names
levels(CustomerData$satisfaction) <- c("Dissatisfied", "Satisfied")
levels(CustomerData$Customer.Type) <- c("Disloyal", "Loyal")
levels(CustomerData$Type.of.Travel) <- c("Business", "Personal")
# Continue factoring numeric finite columns
for(i in 8:21) {
CustomerData[,i] <-
factor(CustomerData[,i], levels=c(0,1,2,3,4,5)) # out-of-5 ratings
}
# Normalize column names
names(CustomerData) <- gsub("\\.", " ", names(CustomerData))
names(CustomerData) <- str_to_title(names(CustomerData))
names(CustomerData) <- gsub("\\ ", ".", names(CustomerData))
# Remove na rows
CustomerData <- CustomerData[complete.cases(CustomerData),]
# train/test division
i <- sample(1:nrow(CustomerData), nrow(CustomerData)*0.8, replace=FALSE)
train <- CustomerData[i,]
test <- CustomerData[-i,]
# summary
summary(train)
str(train)
# NA count
print(paste('Number of NAs:', sum(is.na(train)))) # Print NA count
# graphs
par(mfrow=c(1,2))
## demographics in relation to satisfaction
plot(train$Gender, train$Satisfaction, xlab="Gender", ylab="Satisfaction")
plot(train$Satisfaction, train$Age, ylab="Age", xlab="Satisfaction")
par(mfrow=c(1,2))
## classifications in relation to satisfaction
plot(train$Customer.Type, train$Satisfaction, xlab="Customer Loyalty", ylab="Satisfaction")
plot(train$Class, train$Satisfaction, xlab="Class", ylab="Satisfaction")
par(mfrow=c(2,2))
## in-flight experience in relation to satisfaction
plot(train$Seat.Comfort, train$Satisfaction, xlab="Seat Comfort Rating", ylab="Satisfaction")
plot(train$Inflight.Entertainment, train$Satisfaction, xlab="Entertainment Rating", ylab="Satisfaction")
plot(train$Gate.Location, train$Satisfaction, xlab="Gate Location Rating", ylab="Satisfaction")
plot(train$Inflight.Wifi.Service, train$Satisfaction, xlab="WiFi Rating", ylab="Satisfaction")
?cumsum
# settings/library imports
set.seed(1234)
library(stringr)
library(e1071)
# Read data set
CustomerData_raw <- read.csv("Invistico_Airline.csv")
# Cut down data set, aiming for equal divide between satisfied/dissatisfied
CustomerData_sat <- CustomerData_raw[CustomerData_raw$satisfaction == "satisfied",]
CustomerData_sat <- CustomerData_sat[sample(1:nrow(CustomerData_sat), nrow(CustomerData_sat)*0.1, replace=FALSE),]
CustomerData_dis <- CustomerData_raw[CustomerData_raw$satisfaction == "dissatisfied",]
CustomerData_dis <- CustomerData_dis[sample(1:nrow(CustomerData_dis), nrow(CustomerData_dis)*0.1, replace=FALSE),]
CustomerData <- rbind(CustomerData_sat[1:(nrow(CustomerData_sat)),], CustomerData_dis[1:(nrow(CustomerData_dis)),])
# Factor columns
CustomerData$satisfaction <- factor(CustomerData$satisfaction) # satisfaction
CustomerData$Gender <- factor(CustomerData$Gender) # gender
CustomerData$Customer.Type <- factor(CustomerData$Customer.Type) # customer type
CustomerData$Type.of.Travel <- factor(CustomerData$Type.of.Travel) # travel type
CustomerData$Class <- factor(CustomerData$Class) # class
# Normalize factor names
levels(CustomerData$satisfaction) <- c("Dissatisfied", "Satisfied")
levels(CustomerData$Customer.Type) <- c("Disloyal", "Loyal")
levels(CustomerData$Type.of.Travel) <- c("Business", "Personal")
# Continue factoring numeric finite columns
for(i in 8:21) {
CustomerData[,i] <-
factor(CustomerData[,i], levels=c(0,1,2,3,4,5)) # out-of-5 ratings
}
# Normalize column names
names(CustomerData) <- gsub("\\.", " ", names(CustomerData))
names(CustomerData) <- str_to_title(names(CustomerData))
names(CustomerData) <- gsub("\\ ", ".", names(CustomerData))
# Remove na rows
CustomerData <- CustomerData[complete.cases(CustomerData),]
#reset seed
set.seed(1234)
# train/test/validate division
groups <- c(train=.6, test=.2, validate=.2)
i <- sample(cut(1:nrow(CustomerData),
nrow(CustomerData)*cumsum(c(0,groups)), labels=names(groups)))
train <- CustomerData[i=="train",]
test <- CustomerData[i=="test",]
validate <- CustomerData[i=="validate",]
#i <- sample(1:nrow(CustomerData), nrow(CustomerData)*0.8, replace=FALSE)
#train <- CustomerData[i,]
#test <- CustomerData[-i,]
?tune
# settings/library imports
set.seed(1234)
library(stringr)
library(e1071)
# Read data set
CustomerData_raw <- read.csv("Invistico_Airline.csv")
# Cut down data set, aiming for equal divide between satisfied/dissatisfied
CustomerData_sat <- CustomerData_raw[CustomerData_raw$satisfaction == "satisfied",]
CustomerData_sat <- CustomerData_sat[sample(1:nrow(CustomerData_sat), nrow(CustomerData_sat)*0.1, replace=FALSE),]
CustomerData_dis <- CustomerData_raw[CustomerData_raw$satisfaction == "dissatisfied",]
CustomerData_dis <- CustomerData_dis[sample(1:nrow(CustomerData_dis), nrow(CustomerData_dis)*0.1, replace=FALSE),]
CustomerData <- rbind(CustomerData_sat[1:(nrow(CustomerData_sat)),], CustomerData_dis[1:(nrow(CustomerData_dis)),])
# Factor columns
CustomerData$satisfaction <- factor(CustomerData$satisfaction) # satisfaction
CustomerData$Gender <- factor(CustomerData$Gender) # gender
CustomerData$Customer.Type <- factor(CustomerData$Customer.Type) # customer type
CustomerData$Type.of.Travel <- factor(CustomerData$Type.of.Travel) # travel type
CustomerData$Class <- factor(CustomerData$Class) # class
# Normalize factor names
levels(CustomerData$satisfaction) <- c("Dissatisfied", "Satisfied")
levels(CustomerData$Customer.Type) <- c("Disloyal", "Loyal")
levels(CustomerData$Type.of.Travel) <- c("Business", "Personal")
# Continue factoring numeric finite columns
for(i in 8:21) {
CustomerData[,i] <-
factor(CustomerData[,i], levels=c(0,1,2,3,4,5)) # out-of-5 ratings
}
# Normalize column names
names(CustomerData) <- gsub("\\.", " ", names(CustomerData))
names(CustomerData) <- str_to_title(names(CustomerData))
names(CustomerData) <- gsub("\\ ", ".", names(CustomerData))
# Remove na rows
CustomerData <- CustomerData[complete.cases(CustomerData),]
#reset seed
set.seed(1234)
# train/test/validate division
groups <- c(train=.6, test=.2, validate=.2)
i <- sample(cut(1:nrow(CustomerData),
nrow(CustomerData)*cumsum(c(0,groups)), labels=names(groups)))
train <- CustomerData[i=="train",]
test <- CustomerData[i=="test",]
validate <- CustomerData[i=="validate",]
# train/test division
#i <- sample(1:nrow(CustomerData), nrow(CustomerData)*0.8, replace=FALSE)
#train <- CustomerData[i,]
#test <- CustomerData[-i,]
# summary
summary(train)
str(train)
# NA count
print(paste('Number of NAs:', sum(is.na(train)))) # Print NA count
# graphs
par(mfrow=c(1,2))
## demographics in relation to satisfaction
plot(train$Gender, train$Satisfaction, xlab="Gender", ylab="Satisfaction")
plot(train$Satisfaction, train$Age, ylab="Age", xlab="Satisfaction")
par(mfrow=c(1,2))
## classifications in relation to satisfaction
plot(train$Customer.Type, train$Satisfaction, xlab="Customer Loyalty", ylab="Satisfaction")
plot(train$Class, train$Satisfaction, xlab="Class", ylab="Satisfaction")
par(mfrow=c(2,2))
## in-flight experience in relation to satisfaction
plot(train$Seat.Comfort, train$Satisfaction, xlab="Seat Comfort Rating", ylab="Satisfaction")
plot(train$Inflight.Entertainment, train$Satisfaction, xlab="Entertainment Rating", ylab="Satisfaction")
plot(train$Gate.Location, train$Satisfaction, xlab="Gate Location Rating", ylab="Satisfaction")
plot(train$Inflight.Wifi.Service, train$Satisfaction, xlab="WiFi Rating", ylab="Satisfaction")
svm1 <- svm(Satisfaction~., data=train, kernel="linear", cost=10, scale=TRUE)
summary(svm1)
svm2 <- svm(Satisfaction~., data=train, kernel="polynomial", cost=10, scale=TRUE)
summary(svm2)
svm3 <- svm(Satisfaction~., data=train, kernel="radial", cost=10, scale=TRUE)
summary(svm3)
# Tune model
tune_svm1 <- tune(svm, Satisfaction~., data=validate, kernel="linear",
ranges=list(cost=c(0.001, 0.01, 0.1, 1, 5, 10, 100)))
summary(tune_svm1)
# Extract best model
tune_svm1$best_model
# settings/library imports
set.seed(1234)
library(stringr)
library(randomForest)
library(xgboost)
library(SuperLearner)
library(mltools)
# Read data set
CustomerData <- read.csv("Invistico_Airline.csv")
# Factor columns
CustomerData$satisfaction <- factor(CustomerData$satisfaction) # satisfaction
CustomerData$Gender <- factor(CustomerData$Gender) # gender
CustomerData$Customer.Type <- factor(CustomerData$Customer.Type) # customer type
CustomerData$Type.of.Travel <- factor(CustomerData$Type.of.Travel) # travel type
CustomerData$Class <- factor(CustomerData$Class) # class
# Normalize factor names
levels(CustomerData$satisfaction) <- c("Dissatisfied", "Satisfied")
levels(CustomerData$Customer.Type) <- c("Disloyal", "Loyal")
levels(CustomerData$Type.of.Travel) <- c("Business", "Personal")
# Continue factoring numeric finite columns
for(i in 8:21) {
CustomerData[,i] <-
factor(CustomerData[,i], levels=c(0,1,2,3,4,5)) # out-of-5 ratings
}
# Normalize column names
names(CustomerData) <- gsub("\\.", " ", names(CustomerData))
names(CustomerData) <- str_to_title(names(CustomerData))
names(CustomerData) <- gsub("\\ ", ".", names(CustomerData))
# Remove na rows
CustomerData <- CustomerData[complete.cases(CustomerData),]
# reset seed
set.seed(1234)
# train/test division
i <- sample(1:nrow(CustomerData), nrow(CustomerData)*0.8, replace=FALSE)
train <- CustomerData[i,]
test <- CustomerData[-i,]
# train label/matrix
train_label <- ifelse(train$Satisfaction=="Satisfied", 1, 0)
train_matrix <- data.matrix(train[, -1])
# create model
xgb1 <- xgboost(data=train_matrix, label=train_label,nrounds=100,
objective='binary:logistic', verbose=0)
summary(xgb1)
sl <- SuperLearner(train_label, train[, -1], family=binomial(),
SL.library=list("SL.ranger","SL.ksvm","SL.ipredbagg"))
# settings/library imports
set.seed(1234)
library(stringr)
library(randomForest)
library(xgboost)
library(SuperLearner)
library(mltools)
# Read data set
CustomerData_raw <- read.csv("Invistico_Airline.csv")
# Cut down data set, aiming for equal divide between satisfied/dissatisfied
CustomerData_sat <- CustomerData_raw[CustomerData_raw$satisfaction == "satisfied",]
CustomerData_sat <- CustomerData_sat[sample(1:nrow(CustomerData_sat), nrow(CustomerData_sat)*0.1, replace=FALSE),]
CustomerData_dis <- CustomerData_raw[CustomerData_raw$satisfaction == "dissatisfied",]
CustomerData_dis <- CustomerData_dis[sample(1:nrow(CustomerData_dis), nrow(CustomerData_dis)*0.1, replace=FALSE),]
CustomerData <- rbind(CustomerData_sat[1:(nrow(CustomerData_sat)),], CustomerData_dis[1:(nrow(CustomerData_dis)),])
# Factor columns
CustomerData$satisfaction <- factor(CustomerData$satisfaction) # satisfaction
CustomerData$Gender <- factor(CustomerData$Gender) # gender
CustomerData$Customer.Type <- factor(CustomerData$Customer.Type) # customer type
CustomerData$Type.of.Travel <- factor(CustomerData$Type.of.Travel) # travel type
CustomerData$Class <- factor(CustomerData$Class) # class
# Normalize factor names
levels(CustomerData$satisfaction) <- c("Dissatisfied", "Satisfied")
levels(CustomerData$Customer.Type) <- c("Disloyal", "Loyal")
levels(CustomerData$Type.of.Travel) <- c("Business", "Personal")
# Continue factoring numeric finite columns
for(i in 8:21) {
CustomerData[,i] <-
factor(CustomerData[,i], levels=c(0,1,2,3,4,5)) # out-of-5 ratings
}
# Normalize column names
names(CustomerData) <- gsub("\\.", " ", names(CustomerData))
names(CustomerData) <- str_to_title(names(CustomerData))
names(CustomerData) <- gsub("\\ ", ".", names(CustomerData))
# Remove na rows
CustomerData <- CustomerData[complete.cases(CustomerData),]
# reset seed
set.seed(1234)
# train/test division
i <- sample(1:nrow(CustomerData), nrow(CustomerData)*0.8, replace=FALSE)
train <- CustomerData[i,]
test <- CustomerData[-i,]
rf1 <- randomForest(Satisfaction~., data=train, importance=TRUE)
summary(rf1)
# train label/matrix
train_label <- ifelse(train$Satisfaction=="Satisfied", 1, 0)
train_matrix <- data.matrix(train[, -1])
# create model
xgb1 <- xgboost(data=train_matrix, label=train_label,nrounds=100,
objective='binary:logistic', verbose=0)
summary(xgb1)
sl <- SuperLearner(train_label, train[, -1], family=binomial(),
SL.library=list("SL.ranger","SL.ksvm","SL.ipredbagg"))
summary(sl)
#prediction
pred_rf1 <- predict(rf1, newdata=test, type="response")
# stats
acc_rf1 <- mean(pred==test$Satisfaction)
#prediction
pred_rf1 <- predict(rf1, newdata=test, type="response")
# stats
acc_rf1 <- mean(pred_rf1==test$Satisfaction)
mcc_rf1 <- mcc(factor(pred_rf1), test$Satisfaction)
cat(paste("Accuracy: ", acc_rf1), paste("MCC: ", mcc_rf1), sep='\n')
# test label/matrix
test_label <- ifelse(test$Satisfaction=="Satisfied", 1, 0)
test_matrix <- data.matrix(test[, -1])
# prediction
probs_xgb1 <- predict(xgb1, test_matrix)
pred_xgb1 <- ifelse(probs_xgb1>0.5, 1, 0)
# stats
acc_xgb1 <- mean(pred_xgb1==test_label)
mcc_xgb1 <- mcc(pred_xgb1, test_label)
cat(paste("Accuracy: ", acc_xgb1), paste("MCC: ", mcc_xgb1), sep='\n')
#prediction
pred_rf1 <- predict(rf1, newdata=test, type="response")
# stats
table(pred_rf1, test$Satisfaction)
acc_rf1 <- mean(pred_rf1==test$Satisfaction)
mcc_rf1 <- mcc(factor(pred_rf1), test$Satisfaction)
cat(paste("Accuracy: ", acc_rf1), paste("MCC: ", mcc_rf1), sep='\n')
# Read data set
CustomerData_raw <- read.csv("Invistico_Airline.csv")
View(CustomerData_raw)
View(CustomerData_raw)
View(CustomerData_raw)
View(CustomerData_raw)
# settings/library imports
set.seed(1234)
library(stringr)
library(randomForest)
library(xgboost)
library(SuperLearner)
library(mltools)
# Read data set
CustomerData_raw <- read.csv("Invistico_Airline.csv")
# Cut down data set, aiming for equal divide between satisfied/dissatisfied
CustomerData_sat <- CustomerData_raw[CustomerData_raw$satisfaction == "satisfied",]
CustomerData_sat <- CustomerData_sat[sample(1:nrow(CustomerData_sat), nrow(CustomerData_sat)*0.1, replace=FALSE),]
CustomerData_dis <- CustomerData_raw[CustomerData_raw$satisfaction == "dissatisfied",]
CustomerData_dis <- CustomerData_dis[sample(1:nrow(CustomerData_dis), nrow(CustomerData_dis)*0.1, replace=FALSE),]
CustomerData <- rbind(CustomerData_sat[1:(nrow(CustomerData_sat)),], CustomerData_dis[1:(nrow(CustomerData_dis)),])
# Factor columns
CustomerData$satisfaction <- factor(CustomerData$satisfaction) # satisfaction
CustomerData$Gender <- factor(CustomerData$Gender) # gender
CustomerData$Customer.Type <- factor(CustomerData$Customer.Type) # customer type
CustomerData$Type.of.Travel <- factor(CustomerData$Type.of.Travel) # travel type
CustomerData$Class <- factor(CustomerData$Class) # class
# Normalize factor names
levels(CustomerData$satisfaction) <- c("Dissatisfied", "Satisfied")
levels(CustomerData$Customer.Type) <- c("Disloyal", "Loyal")
levels(CustomerData$Type.of.Travel) <- c("Business", "Personal")
# Continue factoring numeric finite columns
for(i in 8:21) {
CustomerData[,i] <-
factor(CustomerData[,i], levels=c(0,1,2,3,4,5)) # out-of-5 ratings
}
# Normalize column names
names(CustomerData) <- gsub("\\.", " ", names(CustomerData))
names(CustomerData) <- str_to_title(names(CustomerData))
names(CustomerData) <- gsub("\\ ", ".", names(CustomerData))
# Remove na rows
CustomerData <- CustomerData[complete.cases(CustomerData),]
?factor
?subset
# prediction
probs_sl <- predict(sl, test_matrix)
# prediction
probs_sl <- predict.SuperLearner(sl, newdata=test[,-1])
pred_sl <- ifelse(probs_sl>0, 1, 0)
# prediction
probs_sl <- predict.SuperLearner(sl, newdata=test[,-1])
pred_sl <- ifelse(probs_sl$pred>0, 1, 0)
# stats
acc_sl <- mean(pred_sl==test_label)
mcc_sl <- mcc(as.integer(pred_sl), as.integer(test_label))
cat(paste("Accuracy: ", acc_sl), paste("MCC: ", mcc_sl), sep='\n')
# summary
summary(train)
str(train)
# NA count
print(paste('Number of NAs:', sum(is.na(train)))) # Print NA count
# graphs
par(mfrow=c(1,2))
## demographics in relation to satisfaction
plot(train$Gender, train$Satisfaction, xlab="Gender", ylab="Satisfaction")
plot(train$Satisfaction, train$Age, ylab="Age", xlab="Satisfaction")
par(mfrow=c(1,2))
## classifications in relation to satisfaction
plot(train$Customer.Type, train$Satisfaction, xlab="Customer Loyalty", ylab="Satisfaction")
plot(train$Class, train$Satisfaction, xlab="Class", ylab="Satisfaction")
par(mfrow=c(2,2))
## in-flight experience in relation to satisfaction
plot(train$Seat.Comfort, train$Satisfaction, xlab="Seat Comfort Rating", ylab="Satisfaction")
plot(train$Inflight.Entertainment, train$Satisfaction, xlab="Entertainment Rating", ylab="Satisfaction")
plot(train$Gate.Location, train$Satisfaction, xlab="Gate Location Rating", ylab="Satisfaction")
plot(train$Inflight.Wifi.Service, train$Satisfaction, xlab="WiFi Rating", ylab="Satisfaction")
?hist
View(CustomerData_sat)
View(train)
