CustomerData_scaled$Customer.Type <- factor(CustomerData_scaled$Customer.Type) # customer type
CustomerData_scaled$Type.of.Travel <- factor(CustomerData_scaled$Type.of.Travel) # travel type
CustomerData_scaled$Class <- factor(CustomerData_scaled$Class) # class
# Normalize factor names
levels(CustomerData_scaled$satisfaction) <- c("Dissatisfied", "Satisfied")
levels(CustomerData_scaled$Customer.Type) <- c("Disloyal", "Loyal")
levels(CustomerData_scaled$Type.of.Travel) <- c("Business", "Personal")
# Create new cleaned CustomerData data frame for full factoring
CustomerData_factored <- CustomerData_scaled
# Continue factoring numeric finite columns
for(i in 8:21) {
CustomerData_factored[,i] <- factor(CustomerData_factored[,i], levels=c(0,1,2,3,4,5)) # out-of-5 ratings
}
# Remove na rows
CustomerData_scaled <- CustomerData[complete.cases(CustomerData),]
# Create new cleaned CustomerData data frame for scaling
CustomerData_scaled <- CustomerData_raw
# Factor columns
CustomerData_scaled$satisfaction <- factor(CustomerData_scaled$satisfaction) # satisfaction
CustomerData_scaled$Gender <- factor(CustomerData_scaled$Gender) # gender
CustomerData_scaled$Customer.Type <- factor(CustomerData_scaled$Customer.Type) # customer type
CustomerData_scaled$Type.of.Travel <- factor(CustomerData_scaled$Type.of.Travel) # travel type
CustomerData_scaled$Class <- factor(CustomerData_scaled$Class) # class
# Normalize factor names
levels(CustomerData_scaled$satisfaction) <- c("Dissatisfied", "Satisfied")
levels(CustomerData_scaled$Customer.Type) <- c("Disloyal", "Loyal")
levels(CustomerData_scaled$Type.of.Travel) <- c("Business", "Personal")
# Create new cleaned CustomerData data frame for full factoring
CustomerData_factored <- CustomerData_scaled
# Continue factoring numeric finite columns
for(i in 8:21) {
CustomerData_factored[,i] <- factor(CustomerData_factored[,i], levels=c(0,1,2,3,4,5)) # out-of-5 ratings
}
# Remove na rows
CustomerData_scaled <- CustomerData_scaled[complete.cases(CustomerData_scaled),]
CustomerData_factored <- CustomerData_factored[complete.cases(CustomerData_factored),]
# train/test division
i <- sample(1:nrow(CustomerData_factored), nrow(CustomerData_factored)*0.8, replace=FALSE)
train <- CustomerData_factored[i,]
test <- CustomerData_factored[-i,]
# scaling on non-cl data frame
train_cont <- CustomerData_scaled[i, names(CustomerData_scaled[i,])[sapply(CustomerData_scaled[i,], is.numeric)]]
test_cont <- CustomerData_scaled[-i, names(CustomerData_scaled[i,])[sapply(CustomerData_scaled[-i,], is.numeric)]]
train_labels <- CustomerData_scaled[i, 1]
test_labels <- CustomerData_scaled[-i, 1]
means <- sapply(train_cont, mean)
stdvs <- sapply(train_cont, sd)
train_cont <- scale(train_cont, center=means, scale=stdvs)
test_cont <- scale(test_cont, center=means, scale=stdvs)
# summary
summary(train)
str(train)
# NA count
print(paste('Number of NAs:', sum(is.na(train)))) # Print NA count
# graphs
par(mfrow=c(1,2))
## demographics in relation to satisfaction
plot(train$Gender, train$satisfaction, xlab="gender", ylab="satisfaction")
plot(train$satisfaction, train$Age, ylab="age", xlab="satisfaction")
## class in relation to satisfaction
plot(train$Customer.Type, train$satisfaction, xlab="customer", ylab="satisfaction")
plot(train$Class, train$satisfaction, xlab="class", ylab="satisfaction")
## in-flight experience in relation to satisfaction
plot(train$Seat.comfort, train$satisfaction, xlab="comfort rating", ylab="satisfaction")
plot(train$Inflight.entertainment, train$satisfaction, xlab="entertainment rating", ylab="satisfaction")
plot(train$Leg.room.service, train$satisfaction, xlab="leg room rating", ylab="satisfaction")
plot(train$Inflight.wifi.service, train$satisfaction, xlab="Wifi rating", ylab="satisfaction")
# settings/library imports
set.seed(1234)
library(dplyr)
library(stringr)
library(class)
# Read data set
CustomerData_raw <- read.csv("Invistico_Airline.csv")
# Create new cleaned CustomerData data frame for scaling
CustomerData_scaled <- CustomerData_raw
# Factor columns
CustomerData_scaled$satisfaction <- factor(CustomerData_scaled$satisfaction) # satisfaction
CustomerData_scaled$Gender <- factor(CustomerData_scaled$Gender) # gender
CustomerData_scaled$Customer.Type <- factor(CustomerData_scaled$Customer.Type) # customer type
CustomerData_scaled$Type.of.Travel <- factor(CustomerData_scaled$Type.of.Travel) # travel type
CustomerData_scaled$Class <- factor(CustomerData_scaled$Class) # class
# Normalize factor names
levels(CustomerData_scaled$satisfaction) <- c("Dissatisfied", "Satisfied")
levels(CustomerData_scaled$Customer.Type) <- c("Disloyal", "Loyal")
levels(CustomerData_scaled$Type.of.Travel) <- c("Business", "Personal")
# Create new cleaned CustomerData data frame for full factoring
CustomerData_factored <- CustomerData_scaled
# Continue factoring numeric finite columns
for(i in 8:21) {
CustomerData_factored[,i] <- factor(CustomerData_factored[,i], levels=c(0,1,2,3,4,5)) # out-of-5 ratings
}
# Remove na rows
CustomerData_scaled <- CustomerData_scaled[complete.cases(CustomerData_scaled),]
CustomerData_factored <- CustomerData_factored[complete.cases(CustomerData_factored),]
# train/test division
i <- sample(1:nrow(CustomerData_factored), nrow(CustomerData_factored)*0.8, replace=FALSE)
train <- CustomerData_factored[i,]
test <- CustomerData_factored[-i,]
# scaling on non-cl data frame
train_scaled <- CustomerData_factored[i, names(CustomerData_factored[i,])[sapply(CustomerData_factored[i,], is.numeric)]]
test_scaled <- CustomerData_factored[-i, names(CustomerData_factored[i,])[sapply(CustomerData_factored[-i,], is.numeric)]]
train_labels <- CustomerData_factored[i, 1]
test_labels <- CustomerData_factored[-i, 1]
means <- sapply(train_scaled, mean)
stdvs <- sapply(train_scaled, sd)
train_scaled <- scale(train_scaled, center=means, scale=stdvs)
test_scaled <- scale(test_scaled, center=means, scale=stdvs)
# settings/library imports
set.seed(1234)
library(dplyr)
library(stringr)
library(class)
# Read data set
CustomerData_raw <- read.csv("Invistico_Airline.csv")
# Create new cleaned CustomerData data frame for scaling
CustomerData_scaled <- CustomerData_raw
# Factor columns
CustomerData_scaled$satisfaction <- factor(CustomerData_scaled$satisfaction) # satisfaction
CustomerData_scaled$Gender <- factor(CustomerData_scaled$Gender) # gender
CustomerData_scaled$Customer.Type <- factor(CustomerData_scaled$Customer.Type) # customer type
CustomerData_scaled$Type.of.Travel <- factor(CustomerData_scaled$Type.of.Travel) # travel type
CustomerData_scaled$Class <- factor(CustomerData_scaled$Class) # class
# Normalize factor names
levels(CustomerData_scaled$satisfaction) <- c("Dissatisfied", "Satisfied")
levels(CustomerData_scaled$Customer.Type) <- c("Disloyal", "Loyal")
levels(CustomerData_scaled$Type.of.Travel) <- c("Business", "Personal")
# Create new cleaned CustomerData data frame for full factoring
CustomerData_factored <- CustomerData_scaled
# Continue factoring numeric finite columns
for(i in 8:21) {
CustomerData_factored[,i] <- factor(CustomerData_factored[,i], levels=c(0,1,2,3,4,5)) # out-of-5 ratings
}
# Remove na rows
CustomerData_scaled <- CustomerData_scaled[complete.cases(CustomerData_scaled),]
CustomerData_factored <- CustomerData_factored[complete.cases(CustomerData_factored),]
# train/test division
i <- sample(1:nrow(CustomerData_factored), nrow(CustomerData_factored)*0.8, replace=FALSE)
train <- CustomerData_factored[i,]
test <- CustomerData_factored[-i,]
# scaling on non-cl data frame
train_scaled <- CustomerData_scaled[i, names(CustomerData_scaled[i,])[sapply(CustomerData_scaled[i,], is.numeric)]]
test_scaled <- CustomerData_scaled[-i, names(CustomerData_scaled[i,])[sapply(CustomerData_scaled[-i,], is.numeric)]]
train_labels <- CustomerData_scaled[i, 1]
test_labels <- CustomerData_scaled[-i, 1]
means <- sapply(train_scaled, mean)
stdvs <- sapply(train_scaled, sd)
train_scaled <- scale(train_scaled, center=means, scale=stdvs)
test_scaled <- scale(test_scaled, center=means, scale=stdvs)
# summary
summary(train)
str(train)
# NA count
print(paste('Number of NAs:', sum(is.na(train)))) # Print NA count
# graphs
par(mfrow=c(1,2))
## demographics in relation to satisfaction
plot(train$Gender, train$satisfaction, xlab="gender", ylab="satisfaction")
plot(train$satisfaction, train$Age, ylab="age", xlab="satisfaction")
## class in relation to satisfaction
plot(train$Customer.Type, train$satisfaction, xlab="customer", ylab="satisfaction")
plot(train$Class, train$satisfaction, xlab="class", ylab="satisfaction")
## in-flight experience in relation to satisfaction
plot(train$Seat.comfort, train$satisfaction, xlab="comfort rating", ylab="satisfaction")
plot(train$Inflight.entertainment, train$satisfaction, xlab="entertainment rating", ylab="satisfaction")
plot(train$Leg.room.service, train$satisfaction, xlab="leg room rating", ylab="satisfaction")
plot(train$Inflight.wifi.service, train$satisfaction, xlab="Wifi rating", ylab="satisfaction")
# logistic regression model
glm <- glm(satisfaction~Gender+Customer.Type+Type.of.Travel+Class+Seat.comfort+Leg.room.service+Food.and.drink+Inflight.wifi.service+Inflight.entertainment+Departure.Arrival.time.convenient+Flight.Distance+Departure.Delay.in.Minutes+Arrival.Delay.in.Minutes, data=train, family=binomial)
# summary
summary(glm)
# glm predictions
probs_glm <- predict(glm, newdata=test, type="response")
pred_glm <- ifelse(probs_glm>0.5, "Satisfied", "Dissatisfied")
acc_glm <- mean(pred_glm==test$satisfaction)
# glm printout
table(pred_glm, test$satisfaction)
cat(paste("Accuracy: ", acc_glm))
# kNN model
pred_kNN <- knn(train=train_scaled, test=test_scaled, cl=train_labels, k=9)
# kNN printout
results_kNN <- pred_kNN == test_labels
acc_kNN <- length(which(results_kNN==TRUE)) / length(results_kNN)
table(results_kNN, pred_kNN)
cat(paste("Accuracy: ", acc_kNN))
# kNN model
pred_kNN <- knn(train=train_scaled, test=test_scaled, cl=train_labels, k=7)
# kNN printout
results_kNN <- pred_kNN == test_labels
acc_kNN <- length(which(results_kNN==TRUE)) / length(results_kNN)
table(results_kNN, pred_kNN)
cat(paste("Accuracy: ", acc_kNN))
# kNN model
pred_kNN <- knn(train=train_scaled, test=test_scaled, cl=train_labels, k=5)
# kNN printout
results_kNN <- pred_kNN == test_labels
acc_kNN <- length(which(results_kNN==TRUE)) / length(results_kNN)
table(results_kNN, pred_kNN)
cat(paste("Accuracy: ", acc_kNN))
# settings/library imports
set.seed(1234)
library(dplyr)
library(stringr)
library(class)
library(tree)
install(tree)
download(tree)
download("tree")
?tree
# settings/library imports
set.seed(1234)
library(dplyr)
library(stringr)
library(class)
library(rpart)
library(tree)
package(tree)
install.packages("tree")
# settings/library imports
set.seed(1234)
library(dplyr)
library(stringr)
library(class)
library(rpart)
library(tree)
# Create new cleaned CustomerData data frame for scaling (kNN)
CustomerData_scaled <- CustomerData_raw
# Read data set
CustomerData_raw <- read.csv("Invistico_Airline.csv")
# Create new cleaned CustomerData data frame for scaling (kNN)
CustomerData_scaled <- CustomerData_raw
# Factor columns
CustomerData_scaled$satisfaction <- factor(CustomerData_scaled$satisfaction) # satisfaction
CustomerData_scaled$Gender <- factor(CustomerData_scaled$Gender) # gender
CustomerData_scaled$Customer.Type <- factor(CustomerData_scaled$Customer.Type) # customer type
CustomerData_scaled$Type.of.Travel <- factor(CustomerData_scaled$Type.of.Travel) # travel type
CustomerData_scaled$Class <- factor(CustomerData_scaled$Class) # class
# Normalize factor names
levels(CustomerData_scaled$satisfaction) <- c("Dissatisfied", "Satisfied")
levels(CustomerData_scaled$Customer.Type) <- c("Disloyal", "Loyal")
levels(CustomerData_scaled$Type.of.Travel) <- c("Business", "Personal")
# Create new cleaned CustomerData data frame for full factoring (linear regression)
CustomerData_factored <- CustomerData_scaled
# Continue factoring numeric finite columns
for(i in 8:21) {
CustomerData_factored[,i] <- factor(CustomerData_factored[,i], levels=c(0,1,2,3,4,5)) # out-of-5 ratings
}
# Remove na rows
CustomerData_scaled <- CustomerData_scaled[complete.cases(CustomerData_scaled),]
CustomerData_factored <- CustomerData_factored[complete.cases(CustomerData_factored),]
# train/test division
i <- sample(1:nrow(CustomerData_factored), nrow(CustomerData_factored)*0.8, replace=FALSE)
train <- CustomerData_factored[i,]
test <- CustomerData_factored[-i,]
# scaling on non-cl data frame
train_scaled <- CustomerData_scaled[i, names(CustomerData_scaled[i,])[sapply(CustomerData_scaled[i,], is.numeric)]]
test_scaled <- CustomerData_scaled[-i, names(CustomerData_scaled[i,])[sapply(CustomerData_scaled[-i,], is.numeric)]]
train_labels <- CustomerData_scaled[i, 1]
test_labels <- CustomerData_scaled[-i, 1]
means <- sapply(train_scaled, mean)
stdvs <- sapply(train_scaled, sd)
train_scaled <- scale(train_scaled, center=means, scale=stdvs)
test_scaled <- scale(test_scaled, center=means, scale=stdvs)
tree <- rpart(satisfaction~., data=train)
pred_tree <- predict(tree, newdata=test, type="class")
table(pred, test$satisfaction)
# decision tree model
tree <- rpart(satisfaction~., data=train)
pred_tree <- predict(tree, newdata=test, type="class")
# summary
summary(pred_tree)
# tree printout
table(pred_tree, test$satisfaction)
acc_tree <- mean(pred_tree==test$satisfaction)
# decision tree model
tree <- rpart(satisfaction~., data=train)
pred_tree <- predict(tree, newdata=test, type="class")
acc_tree <- mean(pred_tree==test$satisfaction)
# summary
summary(pred_tree)
# tree printout
table(pred_tree, test$satisfaction)
cat(paste("Accuracy: ", acc_glm))
# tree printout
table(pred_tree, test$satisfaction)
cat(paste("Accuracy: ", acc_tree))
# settings/library imports
set.seed(1234)
library(dplyr)
library(stringr)
library(class)
library(rpart)
library(tree)
# Read data set
CustomerData_raw <- read.csv("Invistico_Airline.csv")
# Create new cleaned CustomerData data frame for scaling (kNN)
CustomerData_scaled <- CustomerData_raw
# Factor columns
CustomerData_scaled$satisfaction <- factor(CustomerData_scaled$satisfaction) # satisfaction
CustomerData_scaled$Gender <- factor(CustomerData_scaled$Gender) # gender
CustomerData_scaled$Customer.Type <- factor(CustomerData_scaled$Customer.Type) # customer type
CustomerData_scaled$Type.of.Travel <- factor(CustomerData_scaled$Type.of.Travel) # travel type
CustomerData_scaled$Class <- factor(CustomerData_scaled$Class) # class
# Normalize factor names
levels(CustomerData_scaled$satisfaction) <- c("Dissatisfied", "Satisfied")
levels(CustomerData_scaled$Customer.Type) <- c("Disloyal", "Loyal")
levels(CustomerData_scaled$Type.of.Travel) <- c("Business", "Personal")
# Create new cleaned CustomerData data frame for full factoring (linear regression)
CustomerData_factored <- CustomerData_scaled
# Continue factoring numeric finite columns
for(i in 8:21) {
CustomerData_factored[,i] <- factor(CustomerData_factored[,i], levels=c(0,1,2,3,4,5)) # out-of-5 ratings
}
# Remove na rows
CustomerData_scaled <- CustomerData_scaled[complete.cases(CustomerData_scaled),]
CustomerData_factored <- CustomerData_factored[complete.cases(CustomerData_factored),]
# train/test division
i <- sample(1:nrow(CustomerData_factored), nrow(CustomerData_factored)*0.8, replace=FALSE)
train <- CustomerData_factored[i,]
test <- CustomerData_factored[-i,]
# scaling on non-cl data frame
train_scaled <- CustomerData_scaled[i, names(CustomerData_scaled[i,])[sapply(CustomerData_scaled[i,], is.numeric)]]
test_scaled <- CustomerData_scaled[-i, names(CustomerData_scaled[i,])[sapply(CustomerData_scaled[-i,], is.numeric)]]
train_labels <- CustomerData_scaled[i, 1]
test_labels <- CustomerData_scaled[-i, 1]
means <- sapply(train_scaled, mean)
stdvs <- sapply(train_scaled, sd)
train_scaled <- scale(train_scaled, center=means, scale=stdvs)
test_scaled <- scale(test_scaled, center=means, scale=stdvs)
# decision tree model
tree <- rpart(satisfaction~Gender+Customer.Type+Type.of.Travel+Class+Seat.comfort+Leg.room.service+Food.and.drink+Inflight.wifi.service+Inflight.entertainment+Departure.Arrival.time.convenient+Flight.Distance+Departure.Delay.in.Minutes+Arrival.Delay.in.Minutes, data=train)
pred_tree <- predict(tree, newdata=test, type="class")
acc_tree <- mean(pred_tree==test$satisfaction)
# summary
summary(pred_tree)
# tree printout
table(pred_tree, test$satisfaction)
cat(paste("Accuracy: ", acc_tree))
# decision tree model
tree <- rpart(satisfaction~Gender+Customer.Type+Type.of.Travel+Class+Seat.comfort+Leg.room.service+Food.and.drink+Inflight.wifi.service+Inflight.entertainment+Departure.Arrival.time.convenient+Flight.Distance+Departure.Delay.in.Minutes+Arrival.Delay.in.Minutes, data=train)
# prune tree
cv_tree <- cv.tree(tree)
# decision tree model
tree <- rpart(satisfaction~., data=train)
# prune tree
cv_tree <- cv.tree(tree)
?rpart
?tree
# decision tree model
tree <- tree(satisfaction~., data=train)
# prune tree
cv_tree <- cv.tree(tree)
tree_pruned <- prune.tree(tree, best=5)
pred_tree <- predict(tree, newdata=test, type="class")
acc_tree <- mean(pred_tree==test$satisfaction)
# summary
summary(pred_tree)
# tree printout
table(pred_tree, test$satisfaction)
cat(paste("Accuracy: ", acc_tree))
# decision tree model
tree <- tree(satisfaction~., data=train)
# prune tree
cv_tree <- cv.tree(tree)
cv_tree
tree_pruned <- prune.tree(tree, best=5)
pred_tree <- predict(tree, newdata=test, type="class")
acc_tree <- mean(pred_tree==test$satisfaction)
# summary
summary(pred_tree)
# decision tree model
tree <- tree(satisfaction~., data=train)
# prune tree
cv_tree <- cv.tree(tree)
plot(cv_tree$size, cv_tree$dev, type='b')
tree_pruned <- prune.tree(tree, best=5)
pred_tree <- predict(tree, newdata=test, type="class")
acc_tree <- mean(pred_tree==test$satisfaction)
# summary
summary(pred_tree)
# decision tree model
tree <- tree(satisfaction~., data=train)
# prune tree
cv_tree <- cv.tree(tree)
plot(cv_tree$size, cv_tree$dev, type='b')
tree_pruned <- prune.tree(tree, best=9)
pred_tree <- predict(tree_pruned, newdata=test, type="class")
acc_tree <- mean(pred_tree==test$satisfaction)
# summary
summary(tree_pruned)
# tree printout
table(pred_tree, test$satisfaction)
cat(paste("Accuracy: ", acc_tree))
# decision tree model
tree <- tree(satisfaction~., data=train)
# prune tree
cv_tree <- cv.tree(tree)
plot(cv_tree$size, cv_tree$dev, type='b')
tree_pruned <- prune.tree(tree, best=9)
# make predictions
pred_tree <- predict(tree_pruned, newdata=test, type="class")
acc_tree <- mean(pred_tree==test$satisfaction)
# summary
summary(tree_pruned)
# tree printout
table(pred_tree, test$satisfaction)
cat(paste("Accuracy: ", acc_tree))
# decision tree model
tree <- tree(satisfaction~., data=train)
# prune tree
cv_tree <- cv.tree(tree)
plot(cv_tree$size, cv_tree$dev, type='b')
tree_pruned <- prune.tree(tree, best=5)
# make predictions
pred_tree <- predict(tree_pruned, newdata=test, type="class")
acc_tree <- mean(pred_tree==test$satisfaction)
# summary
summary(tree_pruned)
# tree printout
table(pred_tree, test$satisfaction)
cat(paste("Accuracy: ", acc_tree))
# decision tree model
tree <- tree(satisfaction~., data=train)
# prune tree
cv_tree <- cv.tree(tree)
plot(cv_tree$size, cv_tree$dev, type='b')
tree_pruned <- prune.tree(tree, best=3)
# make predictions
pred_tree <- predict(tree_pruned, newdata=test, type="class")
acc_tree <- mean(pred_tree==test$satisfaction)
# summary
summary(tree_pruned)
# tree printout
table(pred_tree, test$satisfaction)
cat(paste("Accuracy: ", acc_tree))
# decision tree model
tree <- tree(satisfaction~., data=train)
# prune tree
cv_tree <- cv.tree(tree)
plot(cv_tree$size, cv_tree$dev, type='b')
tree_pruned <- prune.tree(tree, best=9)
# make predictions
pred_tree <- predict(tree_pruned, newdata=test, type="class")
acc_tree <- mean(pred_tree==test$satisfaction)
# summary
summary(tree_pruned)
# decision tree model
tree <- tree(satisfaction~Gender+Customer.Type+Type.of.Travel+Class+Seat.comfort+Leg.room.service+Food.and.drink+Inflight.wifi.service+Inflight.entertainment+Departure.Arrival.time.convenient+Flight.Distance+Departure.Delay.in.Minutes+Arrival.Delay.in.Minutes, data=train)
# prune tree
cv_tree <- cv.tree(tree)
plot(cv_tree$size, cv_tree$dev, type='b')
tree_pruned <- prune.tree(tree, best=9)
# make predictions
pred_tree <- predict(tree_pruned, newdata=test, type="class")
acc_tree <- mean(pred_tree==test$satisfaction)
# summary
summary(tree_pruned)
# tree printout
table(pred_tree, test$satisfaction)
cat(paste("Accuracy: ", acc_tree))
# decision tree model
tree <- tree(satisfaction~., data=train)
# prune tree
cv_tree <- cv.tree(tree)
plot(cv_tree$size, cv_tree$dev, type='b')
tree_pruned <- prune.tree(tree, best=9)
# make predictions
pred_tree <- predict(tree_pruned, newdata=test, type="class")
acc_tree <- mean(pred_tree==test$satisfaction)
# summary
summary(tree_pruned)
# tree printout
table(pred_tree, test$satisfaction)
cat(paste("Accuracy: ", acc_tree))
# decision tree model
tree <- tree(satisfaction~., data=train)
# prune tree
cv_tree <- cv.tree(tree)
plot(cv_tree$size, cv_tree$dev, type='b')
tree_pruned <- prune.tree(tree, best=9)
# make predictions
pred_tree <- predict(tree, newdata=test, type="class")
acc_tree <- mean(pred_tree==test$satisfaction)
# summary
summary(tree)
# tree printout
table(pred_tree, test$satisfaction)
cat(paste("Accuracy: ", acc_tree))
# Read data set
CustomerData_raw <- read.csv("Invistico_Airline.csv")
# Create new cleaned CustomerData data frame for scaling (kNN)
CustomerData_scaled <- CustomerData_raw
# Factor columns
CustomerData_scaled$satisfaction <- factor(CustomerData_scaled$satisfaction) # satisfaction
CustomerData_scaled$Gender <- factor(CustomerData_scaled$Gender) # gender
CustomerData_scaled$Customer.Type <- factor(CustomerData_scaled$Customer.Type) # customer type
CustomerData_scaled$Type.of.Travel <- factor(CustomerData_scaled$Type.of.Travel) # travel type
CustomerData_scaled$Class <- factor(CustomerData_scaled$Class) # class
# Normalize factor names
levels(CustomerData_scaled$satisfaction) <- c("Dissatisfied", "Satisfied")
levels(CustomerData_scaled$Customer.Type) <- c("Disloyal", "Loyal")
levels(CustomerData_scaled$Type.of.Travel) <- c("Business", "Personal")
# Create new cleaned CustomerData data frame for full factoring (linear regression)
CustomerData_factored <- CustomerData_scaled
# Continue factoring numeric finite columns
for(i in 8:21) {
CustomerData_factored[,i] <-
factor(CustomerData_factored[,i], levels=c(0,1,2,3,4,5)) # out-of-5 ratings
}
# Remove na rows
CustomerData_scaled <- CustomerData_scaled[complete.cases(CustomerData_scaled),]
CustomerData_factored <- CustomerData_factored[complete.cases(CustomerData_factored),]
